#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

##############################
# APPLICATION                #
# RELATED                    #
# SHORTCUTS                  #
##############################

# Browsers
ctrl + cmd - b : open /Applications/Firefox.app 
ctrl + cmd - c : open /Applications/Google\ Chrome.app
ctrl + cmd - s : open /Applications/Safari.app

# Mail Client
ctrl + cmd - m : open /Applications/Microsoft\ Outlook.app
ctrl + cmd + shift - m : open /Applications/Spark.app

# Note Taking
ctrl + cmd - n : open /Applications/Notion.app
# Messaging
ctrl + cmd - w : open /Applications/WhatsApp.app
cmd + ctrl + shift - d : open /Applications/Discord.app
cmd + ctrl + shift - t : open /Applications/Telegram.app
alt + cmd - s : open /Applications/Slack.app 

# Development 
cmd + shift - i : idea
ctrl + cmd - v : open /Applications/Visual\ Studio\ Code.app
shift + alt - d : open /Applications/DataGrip.app
ctrl + cmd - p : open /Applications/Postman.app

# Other
ctrl + cmd - return : open /Applications/Alacritty.app
ctrl + cmd - z : open /Applications/zoom.us.app
ctrl + cmd  - t : open /Applications/Toggl\ Track.app
cmd + ctrl + shift - b : open /Applications/Binance.app
shift + cmd - m : open /Applications/Spotify.app
ctrl + cmd + shift - p : open /Applications/PassWall.app

##############################
# YABAI                      #
# RELATED                    #
# SHORTCUTS                  #
##############################

## Quickly restart the yabai launch agent
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

## Close active application
#hyper - backspace : $(yabai -m window $(yabai -m query --windows --window | jq -re ".id") --close)
cmd + shift - q : $(yabai -m window $(yabai -m query --windows --window | jq -re ".id") --close)

## swap window
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north

## swap focus 
ctrl + cmd - h : yabai -m window --focus west
ctrl + cmd - l : yabai -m window --focus east
ctrl + cmd - j : yabai -m window --focus south
ctrl + cmd - k : yabai -m window --focus north


## focus display
ctrl + cmd - 1 : yabai -m window --display 1 yabai -m display --focus 1 
ctrl + cmd - 2 : yabai -m window --display 2 yabai -m display --focus 2

## increase window size
ctrl + cmd + alt - left : yabai -m window --resize left:-20:0
ctrl + cmd + alt - down : yabai -m window --resize bottom:0:20

## decrease window size
ctrl + cmd + alt - right : yabai -m window --resize left:20:0
ctrl + cmd + alt - up : yabai -m window --resize bottom:0:-20

## rotate tree 90
ctrl + shift + alt + cmd - r : yabai -m space --rotate 90

# mirror tree y-axis
alt - y : yabai -m space --mirror y-axis
## mirror tree x-axis
alt - x : yabai -m space --mirror x-axis

## toggle window fullscreen zoom
ctrl + shift + cmd - f : yabai -m window --toggle zoom-fullscreen

## float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
yabai -m window --grid 4:4:1:1:2:2 ## toggle sticky alt - s : yabai -m window --toggle sticky ## toggle sticky, float and resize to picture-in-picture size alt - p : yabai -m window --toggle sticky;\ yabai -m window --grid 5:5:4:0:1:1 ## change layout of desktop ctrl + alt - a : yabai -m space --layout bsp ctrl + alt - d : yabai -m space --layout float

## toggle window split type
#alt - e : yabai -m window --toggle split

## toggle window border
shift + alt - b : yabai -m window --toggle border

## create desktop, move window and follow focus
shift + cmd - n :  yabai -m space --create \
	&& wid="$(yabai -m query --windows --window | jq -r '.id')" \
	&& sidx="$(yabai -m query --spaces --display | jq -r 'map(select(."native-fullscreen" == 0))[-1].index')" \
	&& yabai -m window "${wid}" --space "${sidx}" \
	&& yabai -m window --focus "${wid}"

## create desktop and follow focus
shift + alt - n : yabai -m space --create \
	&& wid="$(yabai -m query --windows --window | jq -r '.id')" \
	&& sidx="$(yabai -m query --spaces --display | jq -r 'map(select(."native-fullscreen" == 0))[-1].index')" \
	&& yabai -m window "${wid}" --space "${sidx}"

## destroy desktop
cmd + alt - w : yabai -m space --destroy

# Focus next space by mission-control index if one exists, otherwise focus the first space
cmd + shift + ctrl - y: yabai -m space --focus next || yabai -m space --focus first

# Focus previous space by mission-control index if one exists, otherwise focus the last space
cmd + shift + ctrl - r: yabai -m space --focus prev || yabai -m space --focus last

# Move space right
cmd + shift + alt - right: yabai -m space --move next 

# Move space let
cmd + shift + alt - left: yabai -m space --move prev

# move window to previous space
cmd + shift + ctrl - left: yabai -m window --space prev 

# move window to next space
cmd + shift + ctrl - right: yabai -m window --space next 